'use strict';

angular.module('app-bootstrap').factory('userService', ['$http', function ($http) {

  return {
    // Get the top tracks listened to by a user.
    getTopTracks: function getTopTracks(page, user) {
      return $http.post('http://ws.audioscrobbler.com/2.0/?' + 'method=user.gettoptracks' + '&user=' + user + '&page=' + page + '&api_key=42188804bb4145d42e9cfbd2e260c53c' + '&format=json');
    },
    // Get a list of the recent tracks listened to by this user. Also includes the currently playing
    // track with the nowplaying="true" attribute if the user is currently listening.
    getRecentTracks: function getRecentTracks(page, limit, user) {
      return $http.post('http://ws.audioscrobbler.com/2.0/?' + 'method=user.getrecenttracks' + '&user=' + user + '&page=' + page + '&limit=' + limit + '&api_key=42188804bb4145d42e9cfbd2e260c53c' + '&format=json');
    },
    // Get the top artists listened to by a user
    getTopArtists: function getTopArtists(user, limit) {
      return $http.post('http://ws.audioscrobbler.com/2.0/?' + 'method=user.gettopartists' + '&user=' + user + '&limit=' + limit + '&api_key=42188804bb4145d42e9cfbd2e260c53c' + '&format=json');
    },
    // Get a list of tracks by a given artist scrobbled by this user, including scrobble time.
    getArtistTracks: function getArtistTracks(user, artist, limit) {
      return $http.post('http://ws.audioscrobbler.com/2.0/?' + 'method=user.getartisttracks' + '&user=' + user + '&artist=' + artist + '&limit=' + limit + '&api_key=42188804bb4145d42e9cfbd2e260c53c' + '&format=json');
    }
  };
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy91c2VyU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsT0FBaEMsQ0FBd0MsYUFBeEMsRUFBdUQsQ0FDckQsT0FEcUQsRUFFckQsVUFBVSxLQUFWLEVBQWlCOztBQUVmLFNBQU87O0FBRUwsa0JBQWMsc0JBQVUsSUFBVixFQUFnQixJQUFoQixFQUFzQjtBQUNsQyxhQUFPLE1BQU0sSUFBTixDQUFXLHVDQUNoQiwwQkFEZ0IsR0FFaEIsUUFGZ0IsR0FFTCxJQUZLLEdBR2hCLFFBSGdCLEdBR0wsSUFISyxHQUloQiwyQ0FKZ0IsR0FLaEIsY0FMSyxDQUFQO0FBTUQsS0FUSTs7O0FBWUwscUJBQWlCLHlCQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsSUFBZCxFQUF1QjtBQUN0QyxhQUFPLE1BQU0sSUFBTixDQUFXLHVDQUNoQiw2QkFEZ0IsR0FFaEIsUUFGZ0IsR0FFTCxJQUZLLEdBR2hCLFFBSGdCLEdBR0wsSUFISyxHQUloQixTQUpnQixHQUlKLEtBSkksR0FLaEIsMkNBTGdCLEdBTWhCLGNBTkssQ0FBUDtBQU9ELEtBcEJJOztBQXNCTCxtQkFBZSx1QkFBVSxJQUFWLEVBQWdCLEtBQWhCLEVBQXVCO0FBQ3BDLGFBQU8sTUFBTSxJQUFOLENBQVcsdUNBQ2hCLDJCQURnQixHQUVoQixRQUZnQixHQUVMLElBRkssR0FHaEIsU0FIZ0IsR0FHSixLQUhJLEdBSWhCLDJDQUpnQixHQUtoQixjQUxLLENBQVA7QUFNRCxLQTdCSTs7QUErQkwscUJBQWlCLHlCQUFDLElBQUQsRUFBTyxNQUFQLEVBQWUsS0FBZixFQUF5QjtBQUN4QyxhQUFPLE1BQU0sSUFBTixDQUFXLHVDQUNoQiw2QkFEZ0IsR0FFaEIsUUFGZ0IsR0FFTCxJQUZLLEdBR2hCLFVBSGdCLEdBR0gsTUFIRyxHQUloQixTQUpnQixHQUlKLEtBSkksR0FLaEIsMkNBTGdCLEdBTWhCLGNBTkssQ0FBUDtBQU9EO0FBdkNJLEdBQVA7QUEwQ0QsQ0E5Q29ELENBQXZEIiwiZmlsZSI6ImFwcC9zZXJ2aWNlcy91c2VyU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAtYm9vdHN0cmFwJykuZmFjdG9yeSgndXNlclNlcnZpY2UnLCBbXG4gICckaHR0cCcsXG4gIGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEdldCB0aGUgdG9wIHRyYWNrcyBsaXN0ZW5lZCB0byBieSBhIHVzZXIuXG4gICAgICBnZXRUb3BUcmFja3M6IGZ1bmN0aW9uIChwYWdlLCB1c2VyKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdodHRwOi8vd3MuYXVkaW9zY3JvYmJsZXIuY29tLzIuMC8/JyArXG4gICAgICAgICAgJ21ldGhvZD11c2VyLmdldHRvcHRyYWNrcycgK1xuICAgICAgICAgICcmdXNlcj0nICsgdXNlciArXG4gICAgICAgICAgJyZwYWdlPScgKyBwYWdlICtcbiAgICAgICAgICAnJmFwaV9rZXk9NDIxODg4MDRiYjQxNDVkNDJlOWNmYmQyZTI2MGM1M2MnICtcbiAgICAgICAgICAnJmZvcm1hdD1qc29uJyk7XG4gICAgICB9LFxuICAgICAgLy8gR2V0IGEgbGlzdCBvZiB0aGUgcmVjZW50IHRyYWNrcyBsaXN0ZW5lZCB0byBieSB0aGlzIHVzZXIuIEFsc28gaW5jbHVkZXMgdGhlIGN1cnJlbnRseSBwbGF5aW5nXG4gICAgICAvLyB0cmFjayB3aXRoIHRoZSBub3dwbGF5aW5nPVwidHJ1ZVwiIGF0dHJpYnV0ZSBpZiB0aGUgdXNlciBpcyBjdXJyZW50bHkgbGlzdGVuaW5nLlxuICAgICAgZ2V0UmVjZW50VHJhY2tzOiAocGFnZSwgbGltaXQsIHVzZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2h0dHA6Ly93cy5hdWRpb3Njcm9iYmxlci5jb20vMi4wLz8nICtcbiAgICAgICAgICAnbWV0aG9kPXVzZXIuZ2V0cmVjZW50dHJhY2tzJyArXG4gICAgICAgICAgJyZ1c2VyPScgKyB1c2VyICtcbiAgICAgICAgICAnJnBhZ2U9JyArIHBhZ2UgK1xuICAgICAgICAgICcmbGltaXQ9JyArIGxpbWl0ICtcbiAgICAgICAgICAnJmFwaV9rZXk9NDIxODg4MDRiYjQxNDVkNDJlOWNmYmQyZTI2MGM1M2MnICtcbiAgICAgICAgICAnJmZvcm1hdD1qc29uJyk7XG4gICAgICB9LFxuICAgICAgLy8gR2V0IHRoZSB0b3AgYXJ0aXN0cyBsaXN0ZW5lZCB0byBieSBhIHVzZXJcbiAgICAgIGdldFRvcEFydGlzdHM6IGZ1bmN0aW9uICh1c2VyLCBsaW1pdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnaHR0cDovL3dzLmF1ZGlvc2Nyb2JibGVyLmNvbS8yLjAvPycgK1xuICAgICAgICAgICdtZXRob2Q9dXNlci5nZXR0b3BhcnRpc3RzJyArXG4gICAgICAgICAgJyZ1c2VyPScgKyB1c2VyICtcbiAgICAgICAgICAnJmxpbWl0PScgKyBsaW1pdCArXG4gICAgICAgICAgJyZhcGlfa2V5PTQyMTg4ODA0YmI0MTQ1ZDQyZTljZmJkMmUyNjBjNTNjJyArXG4gICAgICAgICAgJyZmb3JtYXQ9anNvbicpO1xuICAgICAgfSxcbiAgICAgIC8vIEdldCBhIGxpc3Qgb2YgdHJhY2tzIGJ5IGEgZ2l2ZW4gYXJ0aXN0IHNjcm9iYmxlZCBieSB0aGlzIHVzZXIsIGluY2x1ZGluZyBzY3JvYmJsZSB0aW1lLlxuICAgICAgZ2V0QXJ0aXN0VHJhY2tzOiAodXNlciwgYXJ0aXN0LCBsaW1pdCkgPT4ge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnaHR0cDovL3dzLmF1ZGlvc2Nyb2JibGVyLmNvbS8yLjAvPycgK1xuICAgICAgICAgICdtZXRob2Q9dXNlci5nZXRhcnRpc3R0cmFja3MnICtcbiAgICAgICAgICAnJnVzZXI9JyArIHVzZXIgK1xuICAgICAgICAgICcmYXJ0aXN0PScgKyBhcnRpc3QgK1xuICAgICAgICAgICcmbGltaXQ9JyArIGxpbWl0ICtcbiAgICAgICAgICAnJmFwaV9rZXk9NDIxODg4MDRiYjQxNDVkNDJlOWNmYmQyZTI2MGM1M2MnICtcbiAgICAgICAgICAnJmZvcm1hdD1qc29uJyk7XG4gICAgICB9XG4gICAgfTtcblxuICB9XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
