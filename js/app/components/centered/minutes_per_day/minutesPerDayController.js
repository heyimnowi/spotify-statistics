'use strict';

angular.module('app-bootstrap').controller('minutesPerDayController', ['userService', 'trackService', function (userService, trackService) {
  var _this = this;

  var user = 'lopeznoeliab';
  var limitTracks = 200;
  this.tracks = [];
  this.data = [];

  this.checkItem = function (itemName, itemsArray) {
    return _.findIndex(itemsArray, function (o) {
      return o.name === itemName;
    });
  };

  this.addNewTrack = function (dateIndex, track) {
    debugger;
    var trackIndex = _this.checkItem(track.name, _this.tracks);
    if (trackIndex === -1) {
      trackService.getTrackInfo(track.name, track.artist.name).then(function (trackInfoResponse) {
        var newTrack = {
          name: track.name,
          duration: 0
        };
        _this.tracks.push(newTrack);
        trackIndex = _this.tracks.length - 1;
      });
    }
    _this.data[dateIndex].minutes += _this.tracks[trackIndex].duration;
  };

  this.getTracks = function (page) {
    userService.getRecentTracks(page, limitTracks, user).then(function (recentTracksResponse) {
      var arrayTracks = recentTracksResponse.data.recenttracks.track;
      angular.forEach(arrayTracks, function (track) {
        var date = track.date['#text'].split(',')[0];
        var dateIndex = _this.checkItem(date, _this.data);
        debugger;
        if (dateIndex === -1) {
          var newDate = {
            name: date,
            minutes: 0
          };
          _this.data.push(newDate);
          dateIndex = _this.data.length - 1;
        }
        _this.addNewTrack(dateIndex, track);
      });
      if (recentTracksResponse.data.recenttracks['@attr'].totalPages < page) {
        _this.getTracks(page + 1);
      }
    });
  };

  trackService.getTrackInfo('Mark my words', 'Justin Bieber').then(function (trackInfoResponse) {
    console.log(trackInfoResponse);
  });
  this.getTracks(1);
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9jb21wb25lbnRzL2NlbnRlcmVkL21pbnV0ZXNfcGVyX2RheS9taW51dGVzUGVyRGF5Q29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFFBQVEsTUFBUixDQUFlLGVBQWYsRUFBZ0MsVUFBaEMsQ0FBMkMseUJBQTNDLEVBQXNFLENBQ3BFLGFBRG9FLEVBQ3JELGNBRHFELEVBRXBFLFVBQVUsV0FBVixFQUF1QixZQUF2QixFQUFxQztBQUFBOztBQUVuQyxNQUFNLE9BQU8sY0FBYjtBQUNBLE1BQU0sY0FBYyxHQUFwQjtBQUNBLE9BQUssTUFBTCxHQUFjLEVBQWQ7QUFDQSxPQUFLLElBQUwsR0FBWSxFQUFaOztBQUVBLE9BQUssU0FBTCxHQUFpQixVQUFDLFFBQUQsRUFBVyxVQUFYLEVBQTBCO0FBQ3pDLFdBQU8sRUFBRSxTQUFGLENBQVksVUFBWixFQUF3QixVQUFTLENBQVQsRUFBWTtBQUN6QyxhQUFPLEVBQUUsSUFBRixLQUFXLFFBQWxCO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDs7QUFNQSxPQUFLLFdBQUwsR0FBbUIsVUFBQyxTQUFELEVBQVksS0FBWixFQUFzQjtBQUN2QztBQUNBLFFBQUksYUFBYSxNQUFLLFNBQUwsQ0FBZSxNQUFNLElBQXJCLEVBQTJCLE1BQUssTUFBaEMsQ0FBakI7QUFDQSxRQUFJLGVBQWUsQ0FBQyxDQUFwQixFQUF1QjtBQUNyQixtQkFBYSxZQUFiLENBQTBCLE1BQU0sSUFBaEMsRUFBc0MsTUFBTSxNQUFOLENBQWEsSUFBbkQsRUFDRyxJQURILENBQ1EsVUFBQyxpQkFBRCxFQUF1QjtBQUMzQixZQUFNLFdBQVc7QUFDZixnQkFBTSxNQUFNLElBREc7QUFFZixvQkFBVTtBQUZLLFNBQWpCO0FBSUEsY0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixRQUFqQjtBQUNBLHFCQUFhLE1BQUssTUFBTCxDQUFZLE1BQVosR0FBcUIsQ0FBbEM7QUFDRCxPQVJIO0FBU0Q7QUFDRCxVQUFLLElBQUwsQ0FBVSxTQUFWLEVBQXFCLE9BQXJCLElBQWdDLE1BQUssTUFBTCxDQUFZLFVBQVosRUFBd0IsUUFBeEQ7QUFDRCxHQWZEOztBQWlCQSxPQUFLLFNBQUwsR0FBaUIsVUFBQyxJQUFELEVBQVU7QUFDekIsZ0JBQVksZUFBWixDQUE0QixJQUE1QixFQUFrQyxXQUFsQyxFQUErQyxJQUEvQyxFQUNHLElBREgsQ0FDUSxVQUFDLG9CQUFELEVBQTBCO0FBQzlCLFVBQU0sY0FBYyxxQkFBcUIsSUFBckIsQ0FBMEIsWUFBMUIsQ0FBdUMsS0FBM0Q7QUFDQSxjQUFRLE9BQVIsQ0FBZ0IsV0FBaEIsRUFBNkIsVUFBQyxLQUFELEVBQVc7QUFDdEMsWUFBTSxPQUFPLE1BQU0sSUFBTixDQUFXLE9BQVgsRUFBb0IsS0FBcEIsQ0FBMEIsR0FBMUIsRUFBK0IsQ0FBL0IsQ0FBYjtBQUNBLFlBQUksWUFBWSxNQUFLLFNBQUwsQ0FBZSxJQUFmLEVBQXFCLE1BQUssSUFBMUIsQ0FBaEI7QUFDQTtBQUNBLFlBQUksY0FBYyxDQUFDLENBQW5CLEVBQXNCO0FBQ3BCLGNBQU0sVUFBVTtBQUNkLGtCQUFNLElBRFE7QUFFZCxxQkFBUztBQUZLLFdBQWhCO0FBSUEsZ0JBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSxPQUFmO0FBQ0Esc0JBQVksTUFBSyxJQUFMLENBQVUsTUFBVixHQUFtQixDQUEvQjtBQUNEO0FBQ0QsY0FBSyxXQUFMLENBQWlCLFNBQWpCLEVBQTRCLEtBQTVCO0FBQ0QsT0FiRDtBQWNBLFVBQUkscUJBQXFCLElBQXJCLENBQTBCLFlBQTFCLENBQXVDLE9BQXZDLEVBQWdELFVBQWhELEdBQTZELElBQWpFLEVBQXVFO0FBQ3JFLGNBQUssU0FBTCxDQUFlLE9BQU8sQ0FBdEI7QUFDRDtBQUNGLEtBcEJIO0FBcUJELEdBdEJEOztBQXdCQSxlQUFhLFlBQWIsQ0FBMEIsZUFBMUIsRUFBMkMsZUFBM0MsRUFDRyxJQURILENBQ1EsVUFBQyxpQkFBRCxFQUF1QjtBQUMzQixZQUFRLEdBQVIsQ0FBWSxpQkFBWjtBQUNELEdBSEg7QUFJQSxPQUFLLFNBQUwsQ0FBZSxDQUFmO0FBRUQsQ0E5RG1FLENBQXRFIiwiZmlsZSI6ImFwcC9jb21wb25lbnRzL2NlbnRlcmVkL21pbnV0ZXNfcGVyX2RheS9taW51dGVzUGVyRGF5Q29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAtYm9vdHN0cmFwJykuY29udHJvbGxlcignbWludXRlc1BlckRheUNvbnRyb2xsZXInLCBbXG4gICd1c2VyU2VydmljZScsICd0cmFja1NlcnZpY2UnLFxuICBmdW5jdGlvbiAodXNlclNlcnZpY2UsIHRyYWNrU2VydmljZSkge1xuXG4gICAgY29uc3QgdXNlciA9ICdsb3Blem5vZWxpYWInO1xuICAgIGNvbnN0IGxpbWl0VHJhY2tzID0gMjAwO1xuICAgIHRoaXMudHJhY2tzID0gW107XG4gICAgdGhpcy5kYXRhID0gW107XG5cbiAgICB0aGlzLmNoZWNrSXRlbSA9IChpdGVtTmFtZSwgaXRlbXNBcnJheSkgPT4ge1xuICAgICAgcmV0dXJuIF8uZmluZEluZGV4KGl0ZW1zQXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgcmV0dXJuIG8ubmFtZSA9PT0gaXRlbU5hbWU7XG4gICAgICB9KVxuICAgIH07XG5cbiAgICB0aGlzLmFkZE5ld1RyYWNrID0gKGRhdGVJbmRleCwgdHJhY2spID0+IHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgbGV0IHRyYWNrSW5kZXggPSB0aGlzLmNoZWNrSXRlbSh0cmFjay5uYW1lLCB0aGlzLnRyYWNrcyk7XG4gICAgICBpZiAodHJhY2tJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdHJhY2tTZXJ2aWNlLmdldFRyYWNrSW5mbyh0cmFjay5uYW1lLCB0cmFjay5hcnRpc3QubmFtZSlcbiAgICAgICAgICAudGhlbigodHJhY2tJbmZvUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RyYWNrID0ge1xuICAgICAgICAgICAgICBuYW1lOiB0cmFjay5uYW1lLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmFja3MucHVzaChuZXdUcmFjayk7XG4gICAgICAgICAgICB0cmFja0luZGV4ID0gdGhpcy50cmFja3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YVtkYXRlSW5kZXhdLm1pbnV0ZXMgKz0gdGhpcy50cmFja3NbdHJhY2tJbmRleF0uZHVyYXRpb247XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0VHJhY2tzID0gKHBhZ2UpID0+IHtcbiAgICAgIHVzZXJTZXJ2aWNlLmdldFJlY2VudFRyYWNrcyhwYWdlLCBsaW1pdFRyYWNrcywgdXNlcilcbiAgICAgICAgLnRoZW4oKHJlY2VudFRyYWNrc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgY29uc3QgYXJyYXlUcmFja3MgPSByZWNlbnRUcmFja3NSZXNwb25zZS5kYXRhLnJlY2VudHRyYWNrcy50cmFjaztcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXlUcmFja3MsICh0cmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IHRyYWNrLmRhdGVbJyN0ZXh0J10uc3BsaXQoJywnKVswXTtcbiAgICAgICAgICAgIGxldCBkYXRlSW5kZXggPSB0aGlzLmNoZWNrSXRlbShkYXRlLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICBpZiAoZGF0ZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBjb25zdCBuZXdEYXRlID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IGRhdGUsXG4gICAgICAgICAgICAgICAgbWludXRlczogMFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB0aGlzLmRhdGEucHVzaChuZXdEYXRlKTtcbiAgICAgICAgICAgICAgZGF0ZUluZGV4ID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZE5ld1RyYWNrKGRhdGVJbmRleCwgdHJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChyZWNlbnRUcmFja3NSZXNwb25zZS5kYXRhLnJlY2VudHRyYWNrc1snQGF0dHInXS50b3RhbFBhZ2VzIDwgcGFnZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRUcmFja3MocGFnZSArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRyYWNrU2VydmljZS5nZXRUcmFja0luZm8oJ01hcmsgbXkgd29yZHMnLCAnSnVzdGluIEJpZWJlcicpXG4gICAgICAudGhlbigodHJhY2tJbmZvUmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2codHJhY2tJbmZvUmVzcG9uc2UpO1xuICAgICAgfSk7XG4gICAgdGhpcy5nZXRUcmFja3MoMSk7XG5cbiAgfV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
